@page "/auth/login"
@layout AuthLayout
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authStateProvider

<div class="row">
    <div class="col-12">
        <h2>Login to Your Account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email Address</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"></RadzenButton>
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register" Click="Register" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Success" class="btn-block mr-2"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>
@code {
    LoginDto model = new LoginDto();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        @if (result.IsSuccess)
        {
            var userInfo = new UserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };
            await storageService.SetItemAsync("User", userInfo);
            await authStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    public void Register()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
