@page "/plans/addplan"
@inject PlanService planService
@inject IFileReaderService fileReadService
@inject NavigationManager navigationManager

@attribute [Authorize]

<h3>Add A New Plan</h3>

<div class="row">
    <div class="col-8">
        <EditForm Model="model" OnValidSubmit="async ()=> await PostPlanAsync()">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />
                <RadzenTextBox Placeholder="Title" @bind-Value="model.Title" Style="margin:10px;" />
                <RadzenTextArea Placeholder="Description" @bind-Value="model.Description" Style="margin:10px;" />
                <input type="file" @ref="inputReference" @onchange="async () => await ChooseFileAsync()" Style="margin:10px;" />
                <img src="@imageContent" style="width:100px; margin:10px;" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Primary" Disabled="IsBusy" class="btn btn-block" Text="Add New Plan" Style="margin:5px;" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    PlanRequest model = new PlanRequest();
    Stream fileStream = null;

    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool IsBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    ElementReference inputReference;

    async Task ChooseFileAsync()
    {
        var file = (await fileReadService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        string extension = Path.GetExtension(fileInfo.Name);
        var allowExtensions = new string[] { ".jpg", ".png", ".jpeg", ".gif", ".bmp" };

        @if (!allowExtensions.Contains(extension))
        {
            message = "Choosen image is not a valid image";
            messageType = Models.AlertMessageType.Error;
            return;
        }
        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new MemoryStream(memoryStream.ToArray());
            imageContent = $"data:{fileInfo.Type};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task PostPlanAsync()
    {
        IsBusy = true;
        var userState = authState.Result;
        planService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await planService.CreatePlanAsync(model);
        if (result.IsSuccess)
            navigationManager.NavigateTo("/Plans");
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        IsBusy = false;
    }
}